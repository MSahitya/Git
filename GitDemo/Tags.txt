1. Git Tags
 Tags are pointers that refer to particular points in Git
 history.  We can mark a particular moment in time with a
 tag.  Tags are most often used to mark version releases in
 projects (v4.1.0, v4.1.1, etc.)
 Think of tags as branch references that do NOT CHANGE. 
Once a tag is created, it always refers to the same
 commit.  It's just a label for a commit.

The Two Types
 There are two types of Git tags we can use: lightweight
 and annotated tags
 lightweight tags are...lightweight.  They are just a
 name/label that points to a particular commit.
 annotated tags store extra meta data including the
 author's name and email, the date, and a tagging message
 (like a commit message

Semantic
 Versioning
 The semantic versioning spec outlines a standardized
 versioning system for software releases. It provides a
 consistent way for developers to give meaning to their
 software releases (how big of a change is this release??)
 Versions consist of three numbers separated by periods.
 2.4.1
MAJOR RELEASE
 2.4.1
 MINOR RELEASE
 PATCH RELEASE
Initial Release
 Typically, the first release is 1.0.0
 1.0.0
Patch Release
 Patch releases normally do not contain new features or
 significant changes.  They typically signify bug fixes and
 other changes that do not impact how the code is used
 1.0.1
Minor Release
 Minor releases signify that new features or functionality
 have been added, but the project is still backwards
 compatible.  No breaking changes.  The new functionality
 is optional and should not force users to rewrite their own
 code.
 1.1.0
Major Release
 Major releases signify significant changes that is no longer
 backwards compatible.  Features may be removed or
 changed substantially.
 2.0.0


2. Viewing Tags:
git tag
search by particular pattern: git tag -l "*bete*"

Checking out Tags: 

 To view the state of a repo at a particular tag, we can use
 git checkout <tag>.  This puts us in detached HEAD!
 ‚ùØ
 git checkout <tag>




3. The Two Types
 There are two types of Git tags we can use: lightweight
 and annotated tags
 lightweight tags are...lightweight.  They are just a
 name/label that points to a particular commit.
 annotated tags store extra meta data including the
 author's name and email, the d

creating lightweight tags: git tag <tagname>
By default, git will create the tag referring to the commit that HEAD is referencing.


Annotated Tags:
git tag -a <tagname> Git will then open your default text editor and prompt you for additional information.
we can use -m use option to pass a message directly insted of text editor open.

Tagging Previous Commits:
git tag -a <tagname> <Commit-hash>

Forcing Tags:
git tag -f <tagname> if you want to override existing tag

Deleting Tags:
git tag -d <tagname>

pushing tags:
git push --tags
transfer all of your tags to the remote server that are not already there.





























